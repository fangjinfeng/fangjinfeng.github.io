[{"title":"UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏","date":"2017-01-21T16:00:00.000Z","path":"2017/01/22/UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏/","text":"由于项目需求要做一个这样的功能，所以做好之后，抽取出来，封装了下，希望能帮到有需要的朋友。 一.效果图 UINavigationBar和UITabbar渐变.gif 二.思路 A. 设置tableView a.因为当UINavigationBar和UITabBar隐藏的时候，tableView要完全占据整个屏幕，当UINavigationBar和UITabBar显示的时候，tableView又要显示在UINavigationBar下方，所以需要设置tablewView的frame和contentInset： 123self.tableView.frame = CGRectMake(0, -kNavigationBarHeight,kScreenWidth,kScreenHeight+kNavigationBarHeight);self.tableView.contentInset = UIEdgeInsetsMake(kNavigationBarHeight,0,0,0); B.设置UINavigationBar和UITabBar的位移 当tableView向上移动一个属性,UINavigationBar要向上移动一个属性，UITabBar要向下移动一个像素，所以需要在- (void)scrollViewDidScroll:(UIScrollView*)scrollView方法中获取每一次tableView滚动的距离，因此需要记住上次tableView的偏移量距离： 12345678910111213141516CGFloat_originalOffsetY;//上一次偏移量CGFloat offsetY = scrollView.contentOffset.y-_originalOffsetY;//获取每次滚动偏移的距离 _originalOffsetY = scrollView.contentOffset.y;//将这次tableView偏移量重新赋值给_originalOffsetY ~~~ 又因为当UINavigationBar和UITabBar已经隐藏，继续向上滚动，已经不需要隐藏，同样的当tableView滚动到最后滚不动的时候UINavigationBar和UITabBar也不需要移动，所以添加判断条件~~~ //判断是否滚动到底部CGFloat bottomOffset = scrollView.contentSize.height - scrollView.contentOffset.y - scrollView.frame.size.height; //判断UINavigationBar是否已经隐藏scrollView.contentOffset.y &gt; - (2*kNavigationBarHeight) 12345678910111213// UIScrollView 代理- (void)scrollViewDidScroll:(UIScrollView*)scrollView &#123; CGFloat bottomOffset = scrollView.contentSize.height- scrollView.contentOffset.y- scrollView.frame.size.height; if(scrollView.contentOffset.y&gt; - kNavigationBarHeight &amp;&amp; bottomOffset &gt;0) &#123; CGFloat offsetY = scrollView.contentOffset.y-_originalOffsetY; [self moveNavigationBarAndStatusBarByOffsetY:offsetY]; &#125; _originalOffsetY= scrollView.contentOffset.y;&#125; C.设置UINavigationBar和UITabBar相关transform.ty moveNavigationBarAndStatusBarByOffsetY函数设置UINavigationBar和UITabBar相关transform.ty位置的值，同时设置相关背景图片的透明度 123456789101112131415161718192021222324252627282930313233343536373839404142434445// 通过偏移量移动NavigationBar和StatusBar- (void)moveNavigationBarAndStatusBarByOffsetY:(CGFloat)offsetY &#123; CGFloat transformTy = self.navigationController.navigationBar.transform.ty; CGFloat tabbarTransformTy = self.tabBarController.tabBar.transform.ty; // 向上滚动 if (offsetY &gt; 0) &#123; if (fabs(transformTy) &gt;= kNavigationBarHeight) &#123; //当NavigationBar的transfrom.ty大于NavigationBar高度，导航栏离开可视范围，设置NavigationBar隐藏 [self setNavigationBarTransformProgress:1 navigationBarStatusType:NavigationBarStatusOfTypeHidden]; &#125; else &#123; //当NavigationBar的transfrom.ty小于NavigationBar高度，导航栏在可视范围内，设置NavigationBar偏移位置和背景透明度 [self setNavigationBarTransformProgress:offsetY navigationBarStatusType:NavigationBarStatusOfTypeNormal]; &#125; if (fabs(tabbarTransformTy) &gt;= kStatusBarHeight) &#123; //当StatusTabBar的transfrom.ty大于StatusTabBar高度，导航栏离开可视范围，设置StatusTabBar隐藏 [self setStatusBarTransformProgress:1 statusBarStatusType:StatusBarStatusTypeOfHidden]; &#125; else &#123; //当当StatusTabBar的transfrom.ty小于StatusTabBar高度，导航栏在可视范围内，设置StatusTabBar偏移位置和背景透明度 [self setStatusBarTransformProgress:offsetY statusBarStatusType:StatusBarStatusTypeOfNormal]; &#125; // 向下滚动 &#125; else if(offsetY &lt; 0)&#123; if (transformTy &lt; 0 &amp;&amp; fabs(transformTy) &lt;= kNavigationBarHeight) &#123; //当NavigationBar的transfrom.ty小于NavigationBar高度，导航栏进入可视范围内，设置NavigationBar偏移位置和背景透明度 [self setNavigationBarTransformProgress:offsetY navigationBarStatusType:NavigationBarStatusOfTypeNormal]; &#125; else &#123; //当NavigationBar的transfrom.ty超过NavigationBar原来位置，设置NavigationBar显示 [self setNavigationBarTransformProgress:0 navigationBarStatusType:NavigationBarStatusOfTypeShow]; &#125; if (tabbarTransformTy &lt;= kStatusBarHeight &amp;&amp; tabbarTransformTy &gt; 0) &#123; //当StatusTabBar的transfrom.ty小于StatusTabBar高度，导航栏进入可视范围内，设置StatusTabBar偏移位置和背景透明度 [self setStatusBarTransformProgress:offsetY statusBarStatusType:StatusBarStatusTypeOfNormal]; &#125; else &#123; //当StatusTabBar的transfrom.ty超过StatusTabBar原来位置，设置StatusTabBar显示 [self setStatusBarTransformProgress:0 statusBarStatusType:StatusBarStatusTypeOfShow]; &#125; &#125;&#125; D. UINavigationBar和UITabBar背景图透明度和颜色通过这两个函数来改变UINavigationBar和UITabBar背景图透明度和颜色: 12345678910111213141516171819// 根据传入的类型和渐变程度,改变StatusBar的颜色和位置- (void)setStatusBarTransformProgress:(CGFloat)progress statusBarStatusType: (StatusBarStatusType)statusBarStatusType&#123; CGFloat transfromTy = self.tabBarController.tabBar.transform.ty; if (statusBarStatusType == StatusBarStatusTypeOfHidden) &#123; if (transfromTy != kStatusBarHeight) &#123; [self.tabBarController.tabBar fj_moveByTranslationY:kStatusBarHeight * progress]; [self.tabBarController.tabBar fj_setImageViewAlpha:progress]; &#125; &#125;else if(statusBarStatusType == StatusBarStatusTypeOfNormal) &#123; [self.tabBarController.tabBar fj_setTranslationY:-progress]; CGFloat alpha = 1 - fabs(self.tabBarController.tabBar.transform.ty)/kStatusBarHeight; [self.tabBarController.tabBar fj_setImageViewAlpha:alpha]; &#125;else if(statusBarStatusType == StatusBarStatusTypeOfShow) &#123; if (transfromTy != 0) &#123; [self.tabBarController.tabBar fj_moveByTranslationY: -kStatusBarHeight * progress]; [self.tabBarController.tabBar fj_setImageViewAlpha:(1-progress)]; &#125; &#125;&#125; 12345678910111213141516171819// 根据传入的类型和渐变程度,改变NavigationBar的颜色和位置- (void)setNavigationBarTransformProgress:(CGFloat)progress navigationBarStatusType:(NavigationBarStatusType)navigationBarStatusType&#123; CGFloat transfromTy = self.navigationController.navigationBar.transform.ty; if (navigationBarStatusType == NavigationBarStatusOfTypeHidden) &#123; if(transfromTy != -kNavigationBarHeight)&#123; [self.navigationController.navigationBar fj_moveByTranslationY:-kNavigationBarHeight * progress]; [self.navigationController.navigationBar fj_setImageViewAlpha:progress]; &#125; &#125;else if(navigationBarStatusType == NavigationBarStatusOfTypeNormal) &#123; [self.navigationController.navigationBar fj_setTranslationY: - progress]; CGFloat alpha = 1 - fabs(self.navigationController.navigationBar.transform.ty)/kNavigationBarHeight; [self.navigationController.navigationBar fj_setImageViewAlpha:alpha]; &#125;else if(navigationBarStatusType == NavigationBarStatusOfTypeShow) &#123; if(transfromTy != 0)&#123; [self.navigationController.navigationBar fj_moveByTranslationY:-kNavigationBarHeight * progress]; [self.navigationController.navigationBar fj_setImageViewAlpha:(1-progress)]; &#125; &#125;&#125; E.设置UITabBar和UINavigationBar类方法 // 设置背景图透明度 - (void)fj_setImageViewAlpha:(CGFloat)alpha; // 根据translationY在原来位置上偏移 - (void)fj_setTranslationY:(CGFloat)translationY; // 设置偏移translationY - (void)fj_moveByTranslationY:(CGFloat)translationY; F.停止时刻处理 在- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate函数里面判断当前NavigationBar偏移是否超过一半，如果一半则动画隐藏，如果没有则动画显示: 1234567891011121314151617//恢复或隐藏navigationBar和statusBar- (void)restoreNavigationBarAndStatusBarWithContentOffset:(CGPoint)contentOffset &#123; CGFloat navigationBarCenterHeight = kNavigationBarHeight/2.0; CGFloat transformTy = self.navigationController.navigationBar.transform.ty; if (transformTy &lt; 0 &amp;&amp; transformTy &gt; -kNavigationBarHeight) &#123; if (transformTy &lt; -navigationBarCenterHeight &amp;&amp; contentOffset.y &gt; -navigationBarCenterHeight) &#123; [UIView animateWithDuration:kDefaultAnimationTime animations:^&#123; [self hideNavigationBarAndStatusBar]; &#125;]; &#125; else &#123; [UIView animateWithDuration:kDefaultAnimationTime animations:^&#123; [self showNavigationBarAndStatusBar]; &#125;]; &#125; &#125;&#125; 三.最后:送上我最喜欢之一的动漫图: 这是gitHub链接和简书地址，大家有兴趣可以看一下，如果觉得不错，麻烦给个喜欢或星，谢谢！","tags":[{"name":"IOS","slug":"IOS","permalink":"//fjf.com/tags/IOS/"},{"name":"动画","slug":"动画","permalink":"//fjf.com/tags/动画/"},{"name":"UINavigationBar","slug":"UINavigationBar","permalink":"//fjf.com/tags/UINavigationBar/"},{"name":"UITabBar","slug":"UITabBar","permalink":"//fjf.com/tags/UITabBar/"}]},{"title":"2016 总结","date":"2017-01-15T16:00:00.000Z","path":"2017/01/16/我的2016-年终总结/","text":"不知不觉间，2016已经走到年尾了。再过几天就是农历的除夕，粗略回想一下，真心觉得2016过得贼快，仿佛什么都没做，它就溜走了；但细细一想，其实，这一年里也发生了很多事情。而且，对于我来说很多都是大事。年底，稍微闲点，因此，总结下过往，寄语于新年。 #一. 工作工作是这一整年的重心，来青柠互动也一年多了，作为初创公司的元老之一，这一年陪着公司一起成长，经历挺多，也学到挺多。 1. 工作能力 这一年来，基本都是跟着项目走，从1758广场舞到D.Talk再到D.OA,到最后一直担任D.Talk的项目负责人，负责D.Talk的迭代更新；几个项目锻炼下来，编程的思路、对于OC这么语言的理解、对于项目的掌控，以及bug的处理能力，总的来说，是有一定长足的进步。 挺感谢青柠给予的这个平台，让我可以比较完整的锻炼了，虽然其中包含了大量的加班，但能看到自己比较明显的进步，在这个快节奏的城市里，至少能有一点心安。 同时，比较空闲的时候，也自己开源了一些项目，写了一些技术博客，对于技术做了一些总结，也因为这样，认识了很多传说中的大牛，他们有的比自己还小，但是编程的功底明显比自己高很多，羡慕之余，也激发了自己的斗志。感觉这样挺踏实的。 2. 工作认知 2016，移动端的风，基本已经消散，飞起来的猪，很多头先着地了。寒冬已至，作为创业公司的青柠和IOS开发的我也一样受到了影响。 去年，创业初期的25名员工，到今年年底只剩12名老员工了，当然还有40几个新员工的加入。人来人走，在IT这一行业，是一种常态，也算见怪不怪了。 离职的员工里，有些是自己想走，有些是被公司开除的，看着熟悉的面孔的离别，我逐渐意识到，生存成为了公司也是我们这些开发者的目标。激烈竞争的市场为了生存或是以后的生活，公司不断优化着自己的最合理配置，程序员之间的优胜劣汰也逐步显现出来，尤其像现在IOS端人满为患。所以学习成为了我们第一要务。 学习不只是编程技能的提高，还包括着对于项目功能的理解和把控；对于app用户体验的敏锐直觉；对于市场动态的了解等，这方面我真的要感谢强哥，这一年里，他教会了我很多除了编程以外的东西，尤其是作为项目负责人的所必须的细心和用心。 3. 工作心得 这是挺幸运的一年，年会的时候，拿了最佳优秀员工，同时自己表演的节目也得了三等奖，(PS:去年是一等奖，今年选材没选好，拖累了鹏程和余红)，最后还中了128G的IPhone7。确实是挺幸运的，人生第一次中大奖，不过，光红包也发了2000多。但确实很感谢，大家的认可。 不觉间也毕业了2年多了，从福州到深圳，从鑫诺到爱高到青柠，对于工作，确实有太多不可变因素了，离开鑫诺是因为想来深圳，离开爱高，是因为风停了，公司倒了，衷心祝愿青柠会越来越好。 #二. 生活这一年生活中最重要的就是完成了人生的两件大事。 1. 女朋友 作为一个单身20几年的青年，说实话，我一直都觉得24岁左右，我就应该会有女朋友了，后来力达，先有女朋友了，这更加增强了我的预感。 现在的女朋友是我高中好友的大学同学，是一起爬山的时候认识的。可能是因为兴趣爱好比较一致，后来就走到一起了。她和我兴趣爱好很像，都喜欢动漫、运动、看书，但是做事和生活方面则比较互补，我喜欢早起，她喜欢睡懒觉；我相对勤快，她相对较懒；我情商相对高点，而她智商相对高点；我做事喜欢规划，她做事比较随性。 不过我觉得这样也挺好的，关键是聊得来。 2. 房子 2016年另外最大的一件事，就是在厦门岛外翔安区买了一套120平左右的房子。 2015年末，看着深圳飞涨的房价，我就有预感，厦门也一定要涨了，但是2015年底，刚好要准备我妹妹的婚事，也没来得及跟爸妈商量。2016年初，厦门的房价上涨的趋势已经很明显了，所以岛内先点燃了，这是岛外也抬头了，我开始和爸妈合计，一开始找了一套二手房，定金付了，但是房东迟迟不交房，拖了一个多月。我开始觉得房东是看到房价上涨趋势不打算卖了，后来直接退了定金，买了首开的三期的房子。 我爸去问的时候，三期只剩下了2套房子，而且都是120平左右的高层，80到100的已经全部售罄，看着昨天从晚上2点排队到早上的长队，我开始觉得，厦门这一波房价的涨势估计要持续很久了。 有时候觉得人生真的挺悲剧的，加在深圳和厦门之间，房价分别全国第一和全国第四，看着最后剩下的2套房子，我开始纠结了，凑够了首付，接下来每个月的月供也足以压得我喘不过气来，这对于刚毕业不到两年的我来说，确实负担太大了；可是，如果这个时候，不下手，估计以后就再也没机会了。犹豫了一晚上，后来下定决心，买了。毕竟，有压力，才有动力。 从此以后我过上了房奴的生活，而且是扛着大山的房奴。开始j节制自己的花销。可现实往往不如自己所想。如果是以前自己一个人，那倒还好，可是谈恋爱，怎么可能有不花钱的呢？这一年来，其中的艰辛，不足为外人道。 如果有人问我:2016年，最深的体会是什么？ 我想我就回答两点: 1. 钱是好东西，真的是好东西。 2. 要努力提高自己赚钱的本领，然后一定要进行合理的理财规划。 ##三.规划 1. 钻研技术 a. 对以往做过的项目，用到的知识进行总结，将一些模糊的点，理清楚。 b. 将收藏的博客和开源的项目进行相关阅读，并整理笔记，同时将自己项目中用到的一些好用的工具封装，开源，并维护好博客和开源的项目。 c. 将以前看过的算法相关的书籍的知识内容进行整理，然后将《剑指offer》、《编程之美》等相关书籍继续读完并整理笔记。 d. 将学到一半的安全知识继续学下去，然后跟志鹏学长一起研究和学习。 2. 照顾家人 a. 明年年初如果不出意外的话，我就和女朋友结婚了","tags":[{"name":"总结","slug":"总结","permalink":"//fjf.com/tags/总结/"},{"name":"情感","slug":"情感","permalink":"//fjf.com/tags/情感/"}]}]