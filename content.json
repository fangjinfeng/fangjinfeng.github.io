{"meta":{"title":"Litten的博客","subtitle":"胆小认生，不易相处","description":"华中科技大学09级，就职于腾讯SNG。擅长各项前端技能，深入研究移动端开发与前端性能。非专业视觉设计师。此为博客一枚。","author":"Litten","url":"//fjf.com"},"pages":[],"posts":[{"title":"UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏","slug":"UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏","date":"2017-01-16T06:00:37.000Z","updated":"2017-01-21T03:27:04.000Z","comments":true,"path":"2017/01/16/UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏/","link":"","permalink":"//fjf.com/2017/01/16/UINavigationBar和UITabBar 上滚渐变显示 下拉渐变隐藏/","excerpt":"","text":"由于项目需求要做一个这样的功能，所以做好之后，抽取出来，封装了下，希望能帮到有需要的朋友。 1.效果图 2.思路A. 设置tableViewa.因为当UINavigationBar和UITabBar隐藏的时候，tableView要完全占据整个屏幕，当UINavigationBar和UITabBar显示的时候，tableView又要显示在UINavigationBar下方，所以需要设置tablewView的frame和contentInset： self.tableView.frame = CGRectMake(0, -kNavigationBarHeight,kScreenWidth,kScreenHeight+kNavigationBarHeight); self.tableView.contentInset = UIEdgeInsetsMake(kNavigationBarHeight,0,0,0); B.当tableView向上移动一个属性,UINavigationBar要向上移动一个属性，UITabBar要向下移动一个像素，所以需要在- (void)scrollViewDidScroll:(UIScrollView*)scrollView方法中获取每一次tableView滚动的距离，因此需要记住上次tableView的偏移量距离：CGFloat_originalOffsetY;//上一次偏移量 CGFloat offsetY = scrollView.contentOffset.y-_originalOffsetY;//获取每次滚动偏移的距离 _originalOffsetY = scrollView.contentOffset.y;//将这次tableView偏移量重新赋值给_originalOffsetY 又因为当UINavigationBar和UITabBar已经隐藏，继续向上滚动，已经不需要隐藏，同样的当tableView滚动到最后滚不动的时候UINavigationBar和UITabBar也不需要移动，所以添加判断条件 //判断是否滚动到底部 CGFloat bottomOffset = scrollView.contentSize.height- scrollView.contentOffset.y- scrollView.frame.size.height; //判断UINavigationBar是否已经隐藏 scrollView.contentOffset.y &gt; - (2*kNavigationBarHeight) //UIScrollView 函数 - (void)scrollViewDidScroll:(UIScrollView*)scrollView { CGFloat bottomOffset = scrollView.contentSize.height- scrollView.contentOffset.y- scrollView.frame.size.height; if(scrollView.contentOffset.y&gt; - kNavigationBarHeight &amp;&amp; bottomOffset &gt;0) { CGFloat offsetY = scrollView.contentOffset.y-_originalOffsetY; [self moveNavigationBarAndStatusBarByOffsetY:offsetY]; } _originalOffsetY= scrollView.contentOffset.y; } C.moveNavigationBarAndStatusBarByOffsetY函数设置UINavigationBar和UITabBar相关transform.ty位置的值，同时设置相关背景图片的透明度 // 通过偏移量移动NavigationBar和StatusBar (void)moveNavigationBarAndStatusBarByOffsetY:(CGFloat)offsetY { CGFloat transformTy = self.navigationController.navigationBar.transform.ty; CGFloat tabbarTransformTy = self.tabBarController.tabBar.transform.ty; // 向上滚动 if (offsetY &gt; 0) { if (fabs(transformTy) &gt;= kNavigationBarHeight) { //当NavigationBar的transfrom.ty大于NavigationBar高度，导航栏离开可视范围，设置NavigationBar隐藏 [self setNavigationBarTransformProgress:1 navigationBarStatusType:NavigationBarStatusOfTypeHidden]; } else { //当NavigationBar的transfrom.ty小于NavigationBar高度，导航栏在可视范围内，设置NavigationBar偏移位置和背景透明度 [self setNavigationBarTransformProgress:offsetY navigationBarStatusType:NavigationBarStatusOfTypeNormal]; } if (fabs(tabbarTransformTy) &gt;= kStatusBarHeight) { //当StatusTabBar的transfrom.ty大于StatusTabBar高度，导航栏离开可视范围，设置StatusTabBar隐藏 [self setStatusBarTransformProgress:1 statusBarStatusType:StatusBarStatusTypeOfHidden]; } else { //当当StatusTabBar的transfrom.ty小于StatusTabBar高度，导航栏在可视范围内，设置StatusTabBar偏移位置和背景透明度 [self setStatusBarTransformProgress:offsetY statusBarStatusType:StatusBarStatusTypeOfNormal]; } // 向下滚动 } else if(offsetY &lt; 0){ if (transformTy &lt; 0 &amp;&amp; fabs(transformTy) &lt;= kNavigationBarHeight) { //当NavigationBar的transfrom.ty小于NavigationBar高度，导航栏进入可视范围内，设置NavigationBar偏移位置和背景透明度 [self setNavigationBarTransformProgress:offsetY navigationBarStatusType:NavigationBarStatusOfTypeNormal]; } else { //当NavigationBar的transfrom.ty超过NavigationBar原来位置，设置NavigationBar显示 [self setNavigationBarTransformProgress:0 navigationBarStatusType:NavigationBarStatusOfTypeShow]; } if (tabbarTransformTy &lt;= kStatusBarHeight &amp;&amp; tabbarTransformTy &gt; 0) { //当StatusTabBar的transfrom.ty小于StatusTabBar高度，导航栏进入可视范围内，设置StatusTabBar偏移位置和背景透明度 [self setStatusBarTransformProgress:offsetY statusBarStatusType:StatusBarStatusTypeOfNormal]; } else { //当StatusTabBar的transfrom.ty超过StatusTabBar原来位置，设置StatusTabBar显示 [self setStatusBarTransformProgress:0 statusBarStatusType:StatusBarStatusTypeOfShow]; } } } D.通过这两个函数 (void)setStatusBarTransformProgress:(CGFloat)progress statusBarStatusType:(StatusBarStatusType)statusBarStatusType和 (void)setNavigationBarTransformProgress:(CGFloat)progress navigationBarStatusType:(NavigationBarStatusType)navigationBarStatusType改变NavigationBarStatusTabBar背景图透明图和颜色 // 根据传入的类型和渐变程度,改变StatusBar的颜色和位置 (void)setStatusBarTransformProgress:(CGFloat)progress statusBarStatusType: (StatusBarStatusType)statusBarStatusType{CGFloat transfromTy = self.tabBarController.tabBar.transform.ty; if (statusBarStatusType == StatusBarStatusTypeOfHidden) { if (transfromTy != kStatusBarHeight) { [self.tabBarController.tabBar fj_moveByTranslationY:kStatusBarHeight * progress]; [self.tabBarController.tabBar fj_setImageViewAlpha:progress]; } }else if(statusBarStatusType == StatusBarStatusTypeOfNormal) { [self.tabBarController.tabBar fj_setTranslationY:-progress]; CGFloat alpha = 1 - fabs(self.tabBarController.tabBar.transform.ty)/kStatusBarHeight; [self.tabBarController.tabBar fj_setImageViewAlpha:alpha]; }else if(statusBarStatusType == StatusBarStatusTypeOfShow) { if (transfromTy != 0) { [self.tabBarController.tabBar fj_moveByTranslationY: -kStatusBarHeight * progress]; [self.tabBarController.tabBar fj_setImageViewAlpha:(1-progress)]; } } } // 根据传入的类型和渐变程度,改变NavigationBar的颜色和位置 (void)setNavigationBarTransformProgress:(CGFloat)progress navigationBarStatusType:(NavigationBarStatusType)navigationBarStatusType{ CGFloat transfromTy = self.navigationController.navigationBar.transform.ty; if (navigationBarStatusType == NavigationBarStatusOfTypeHidden) {if(transfromTy != -kNavigationBarHeight){ [self.navigationController.navigationBar fj_moveByTranslationY:-kNavigationBarHeight * progress]; [self.navigationController.navigationBar fj_setImageViewAlpha:progress]; } }else if(navigationBarStatusType == NavigationBarStatusOfTypeNormal) {[self.navigationController.navigationBar fj_setTranslationY: - progress]; CGFloat alpha = 1 - fabs(self.navigationController.navigationBar.transform.ty)/kNavigationBarHeight; [self.navigationController.navigationBar fj_setImageViewAlpha:alpha]; }else if(navigationBarStatusType == NavigationBarStatusOfTypeShow) {if(transfromTy != 0){ [self.navigationController.navigationBar fj_moveByTranslationY:-kNavigationBarHeight * progress]; [self.navigationController.navigationBar fj_setImageViewAlpha:(1-progress)]; } }}E.设置UITabBar和UINavigationBar类方法// 设置背景图透明度 (void)fj_setImageViewAlpha:(CGFloat)alpha;// 根据translationY在原来位置上偏移 (void)fj_setTranslationY:(CGFloat)translationY;// 设置偏移translationY (void)fj_moveByTranslationY:(CGFloat)translationY; F.在- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate函数里面判断当前NavigationBar偏移是否超过一半，如果一半则动画隐藏，如果没有则动画显示: //恢复或隐藏navigationBar和statusBar (void)restoreNavigationBarAndStatusBarWithContentOffset:(CGPoint)contentOffset { CGFloat navigationBarCenterHeight = kNavigationBarHeight/2.0; CGFloat transformTy = self.navigationController.navigationBar.transform.ty; if (transformTy &lt; 0 &amp;&amp; transformTy &gt; -kNavigationBarHeight) { if (transformTy &lt; -navigationBarCenterHeight &amp;&amp; contentOffset.y &gt; -navigationBarCenterHeight) { [UIView animateWithDuration:kDefaultAnimationTime animations:^{ [self hideNavigationBarAndStatusBar]; }]; }else { [UIView animateWithDuration:kDefaultAnimationTime animations:^{ [self showNavigationBarAndStatusBar]; }]; } } } G.最后:送上我最喜欢之一的动漫图: 这是gitHub链接和简书链接，大家有兴趣可以看一下，如果觉得不错，麻烦给个喜欢或星，谢谢！","categories":[],"tags":[]},{"title":"2016 总结","slug":"hello-world","date":"2017-01-16T06:00:37.000Z","updated":"2017-01-21T03:11:00.000Z","comments":true,"path":"2017/01/16/hello-world/","link":"","permalink":"//fjf.com/2017/01/16/hello-world/","excerpt":"","text":"不知不觉间，2016已经走到年尾了。过几天就是农历的除夕了，粗略回想一下，真的觉得2016过得贼快，仿佛什么都没做，它就溜走了；但细细一想，其实这一年里也发生了很多事情。而且，对于我来说很多都是大事。 工作工作是这一整年的重心，来青柠互动也一年多了，作为初创公司的元老之一，这一年基本一直走在项目的最前端，说实话，挺喜欢IT这个行业的，主要是因为IT人员：基本闷骚但大多善良；也挺喜欢青柠的，因为这里有熟悉的朋友：姜总、廖总、余红、鹏程、强哥、傲座…… Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}